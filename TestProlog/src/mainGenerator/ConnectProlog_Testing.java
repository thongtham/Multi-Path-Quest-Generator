package mainGenerator;

public class ConnectProlog_Testing {

	public static void main(String[] args)
	{
		
        String queryTest = 
        "startQuestPath([[messenger1,isAlive,true,z,zz,zzz],[blacksmith1,isAlive,true,z,zz,zzz]],[[player,isAlive,true,z,zz,zzz],[player,currentLocation,city,z,zz,zzz],[player,level,1,z,zz,zzz],[mob_npc_1,isAlive,true,z,zz,zzz],[mob_npc_1,currentLocation,city,z,zz,zzz],[mob_npc_1,level,15,z,zz,zzz],[king,isAlive,true,z,zz,zzz],[king,currentLocation,palace,z,zz,zzz],[king,level,20,z,zz,zzz],[king,listOccupation,king,z,zz,zzz],[king,listOccupation,noble,z,zz,zzz],[king,listStatus,rich,z,zz,zzz],[soldier1,isAlive,true,z,zz,zzz],[soldier1,currentLocation,city,z,zz,zzz],[soldier1,level,20,z,zz,zzz],[soldier1,listOccupation,soldier,z,zz,zzz],[soldier2,isAlive,true,z,zz,zzz],[soldier2,currentLocation,jail,z,zz,zzz],[soldier2,level,20,z,zz,zzz],[soldier2,listOccupation,soldier,z,zz,zzz],[soldier3,isAlive,true,z,zz,zzz],[soldier3,currentLocation,palace,z,zz,zzz],[soldier3,level,20,z,zz,zzz],[soldier3,listOccupation,soldier,z,zz,zzz],[doctor1,isAlive,true,z,zz,zzz],[doctor1,currentLocation,city,z,zz,zzz],[doctor1,level,20,z,zz,zzz],[doctor1,listOccupation,doctor,z,zz,zzz],[doctor1,listSkill,heal,z,zz,zzz],[blacksmith1,isAlive,true,z,zz,zzz],[blacksmith1,currentLocation,city,z,zz,zzz],[blacksmith1,level,20,z,zz,zzz],[blacksmith1,listOccupation,blacksmith,z,zz,zzz],[thief1,isAlive,true,z,zz,zzz],[thief1,currentLocation,jail,z,zz,zzz],[thief1,level,20,z,zz,zzz],[thief1,listOccupation,thief,z,zz,zzz],[thief1,listItem,lockpick,itemName,lockpick,50000],[thief1,listItem,lockpick,ownerName,thief1,50000],[thief1,listItem,lockpick,isOnGround,false,50000],[thief1,listItem,lockpick,currentLocation,jail,50000],[thief1,listItem,lockpick,typeOfItem,supply,50000],[thief1,listItem,lockpick,typeOfFunction,consumable,50000],[messenger1,isAlive,true,z,zz,zzz],[messenger1,currentLocation,city,z,zz,zzz],[messenger1,level,20,z,zz,zzz],[messenger1,listOccupation,messenger,z,zz,zzz],[miner1,isAlive,true,z,zz,zzz],[miner1,currentLocation,dungeon,z,zz,zzz],[miner1,level,20,z,zz,zzz],[miner1,listOccupation,miner,z,zz,zzz],[lumberjack1,isAlive,true,z,zz,zzz],[lumberjack1,currentLocation,forest,z,zz,zzz],[lumberjack1,level,20,z,zz,zzz],[lumberjack1,listOccupation,lumberjack,z,zz,zzz],[merchant1,isAlive,true,z,zz,zzz],[merchant1,currentLocation,city,z,zz,zzz],[merchant1,level,20,z,zz,zzz],[merchant1,listOccupation,merchant,z,zz,zzz],[merchant1,listStatus,rich,z,zz,zzz],[merchant1,listItem,potion_poison,itemName,potion_poison,50000],[merchant1,listItem,potion_poison,ownerName,merchant1,50000],[merchant1,listItem,potion_poison,isOnGround,false,50000],[merchant1,listItem,potion_poison,currentLocation,city,50000],[merchant1,listItem,potion_poison,typeOfItem,supply,50000],[merchant1,listItem,potion_poison,typeOfFunction,consumable,50000],[merchant1,listItem,potion_heal,itemName,potion_heal,50001],[merchant1,listItem,potion_heal,ownerName,merchant1,50001],[merchant1,listItem,potion_heal,isOnGround,false,50001],[merchant1,listItem,potion_heal,currentLocation,city,50001],[merchant1,listItem,potion_heal,typeOfItem,supply,50001],[merchant1,listItem,potion_heal,typeOfFunction,consumable,50001],[merchant1,listItem,antidote,itemName,antidote,50002],[merchant1,listItem,antidote,ownerName,merchant1,50002],[merchant1,listItem,antidote,isOnGround,false,50002],[merchant1,listItem,antidote,currentLocation,city,50002],[merchant1,listItem,antidote,typeOfItem,supply,50002],[merchant1,listItem,antidote,typeOfFunction,consumable,50002],[city,locationName,city,z,zz,zzz],[city,listConnectLocation,forest,z,zz,zzz],[city,listConnectLocation,jail,z,zz,zzz],[city,listConnectLocation,palace,z,zz,zzz],[dungeon,locationName,dungeon,z,zz,zzz],[dungeon,listConnectLocation,forest,z,zz,zzz],[dungeon,listItem,dagger,itemName,dagger,5],[dungeon,listItem,dagger,ownerName,null,5],[dungeon,listItem,dagger,isOnGround,true,5],[dungeon,listItem,dagger,currentLocation,dungeon,5],[dungeon,listItem,dagger,typeOfItem,weapon,5],[dungeon,listItem,dagger,typeOfFunction,equipment,5],[forest,locationName,forest,z,zz,zzz],[forest,listConnectLocation,city,z,zz,zzz],[forest,listConnectLocation,dungeon,z,zz,zzz],[forest,listItem,berry,itemName,berry,100000],[forest,listItem,berry,ownerName,null,100000],[forest,listItem,berry,isOnGround,true,100000],[forest,listItem,berry,currentLocation,forest,100000],[forest,listItem,berry,typeOfItem,supply,100000],[forest,listItem,berry,typeOfFunction,consumable,100000],[forest,listItem,poison_plant,itemName,poison_plant,101000],[forest,listItem,poison_plant,ownerName,null,101000],[forest,listItem,poison_plant,isOnGround,true,101000],[forest,listItem,poison_plant,currentLocation,forest,101000],[forest,listItem,poison_plant,typeOfItem,supply,101000],[forest,listItem,poison_plant,typeOfFunction,consumable,101000],[forest,listItem,poison_plant,itemName,poison_plant,101001],[forest,listItem,poison_plant,ownerName,null,101001],[forest,listItem,poison_plant,isOnGround,true,101001],[forest,listItem,poison_plant,currentLocation,forest,101001],[forest,listItem,poison_plant,typeOfItem,supply,101001],[forest,listItem,poison_plant,typeOfFunction,consumable,101001],[jail,locationName,jail,z,zz,zzz],[jail,listConnectLocation,city,z,zz,zzz],[palace,locationName,palace,z,zz,zzz],[palace,listConnectLocation,city,z,zz,zzz],[palace,listItem,diamond,itemName,diamond,1],[palace,listItem,diamond,ownerName,null,1],[palace,listItem,diamond,isOnGround,true,1],[palace,listItem,diamond,currentLocation,palace,1],[palace,listItem,diamond,typeOfItem,luxury,1],[palace,listItem,diamond,typeOfFunction,object,1]],[[friend,alpha,beta]],[],[a,0],PF)"; 
        System.out.println(queryTest);
        
		String ans = ConnectorProlog.queryOnce(queryTest);
		System.out.println(ans);
	}
}
